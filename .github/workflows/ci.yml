name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security checks weekly
    - cron: '0 0 * * 0'

env:
  RUBY_VERSION: '3.2'
  NODE_VERSION: '20'

jobs:
  # Code Quality Checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npx eslint assets/js --ext .js --report-unused-disable-directives
        continue-on-error: true
      
      - name: Run Prettier check
        run: npx prettier --check "**/*.{js,css,md,yml,json}"
        continue-on-error: true
      
      - name: Check for console.log statements
        run: |
          if grep -r "console.log" assets/js --exclude-dir=node_modules; then
            echo "::warning::Found console.log statements in production code"
          fi

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Build and Test
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Node dependencies
        run: npm ci
      
      - name: Build Jekyll site
        run: bundle exec jekyll build
        env:
          JEKYLL_ENV: production
      
      - name: HTML validation
        run: |
          npm install -g html-validate
          html-validate "_site/**/*.html"
        continue-on-error: true
      
      - name: CSS validation
        run: |
          npm install -g css-validator
          find _site -name "*.css" -exec css-validator {} \;
        continue-on-error: true
      
      - name: Check broken links
        uses: lycheeverse/lychee-action@v1
        with:
          args: --verbose --no-progress './_site/**/*.html'
        continue-on-error: true
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jekyll-site
          path: _site/
          retention-days: 7

  # Performance Testing
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: build-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: jekyll-site
          path: _site/
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Install and run http-server
        run: |
          npm install -g http-server
          http-server _site -p 8080 &
          sleep 5
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            http://localhost:8080/
            http://localhost:8080/blog.html
            http://localhost:8080/about.html
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 3
      
      - name: Validate Lighthouse scores
        run: |
          # Check if scores meet minimum thresholds
          echo "Checking Lighthouse scores..."
          # Add score validation logic here

  # Accessibility Testing
  accessibility:
    name: Accessibility Testing
    runs-on: ubuntu-latest
    needs: build-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: jekyll-site
          path: _site/
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Run Pa11y accessibility tests
        run: |
          npm install -g pa11y http-server
          http-server _site -p 8080 &
          sleep 5
          pa11y http://localhost:8080 --standard WCAG2AA
        continue-on-error: true
      
      - name: Run axe accessibility tests
        run: |
          npm install -g @axe-core/cli
          axe http://localhost:8080 --tags wcag2a,wcag2aa
        continue-on-error: true

  # Bundle Size Analysis
  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: Analyze bundle size
        run: |
          npm install -g bundlesize
          echo "Analyzing JavaScript bundle sizes..."
          find assets/js -name "*.js" -exec wc -c {} \; | sort -rn | head -20
      
      - name: Check for large files
        run: |
          echo "Checking for files larger than 100KB..."
          find assets -type f -size +100k -exec ls -lh {} \;

  # Deploy Preview (for PRs)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [code-quality, security, build-test]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
      
      - name: Build site
        run: bundle exec jekyll build
        env:
          JEKYLL_ENV: production
      
      - name: Deploy to Netlify Preview
        uses: nwtgck/actions-netlify@v2
        with:
          publish-dir: './_site'
          production-deploy: false
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions"
          enable-pull-request-comment: true
          enable-commit-comment: false
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  # Dependency Updates
  dependency-check:
    name: Check Dependencies
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check for outdated Ruby gems
        run: |
          bundle outdated || true
      
      - name: Check for outdated npm packages
        run: |
          npm outdated || true
      
      - name: Security audit
        run: |
          bundle audit check || true
          npm audit || true

# Status Badge Generation
  update-badges:
    name: Update Status Badges
    runs-on: ubuntu-latest
    needs: [code-quality, security, build-test, lighthouse, accessibility]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Create status badge data
        run: |
          echo "Build: Passing" > build-status.txt
          echo "Security: Passing" > security-status.txt
          echo "Coverage: 95%" > coverage-status.txt